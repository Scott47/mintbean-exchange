{"version":3,"sources":["components/ExchangeTable.js","components/ExchangeGET.js","ApplicationViews.js","serviceWorker.js","index.js"],"names":["ExchangeTable","props","Container","Table","dark-light","size","hover","bordered","className","Object","entries","currency","map","key","ExchangeGET","useState","conversion_rates","myCurrency","setMyCurrency","useEffect","fetch","method","then","response","json","data","keys","length","ApplicationViews","Fragment","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sSA+BeA,G,MA3BO,SAACC,GACrB,OACE,oCACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,cAAA,EAAWC,KAAK,KAAKC,OAAK,EAACC,UAAQ,EAACC,UAAU,UACjD,+BACA,wBAAIA,UAAU,eACV,uCACA,sCAGJ,+BACHC,OAAOC,QAAQT,EAAMU,UAAUC,KAAI,SAAAD,GAC/B,OAAS,wBAAIH,UAAU,SAASK,IAAKF,EAAS,IAC3C,4BAAKA,EAAS,IACd,4BAAKA,EAAS,cCuBfG,EAnCK,SAACb,GAAW,IAAD,EACOc,mBAAS,CAAEC,iBAAkB,KADpC,mBACtBC,EADsB,KACVC,EADU,KAqB7B,OALAC,qBACE,WAbAC,MAAM,yEAEJ,CACEC,OAAQ,QAGTC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLP,EAAcO,QAOf,IAGH,oCACE,yBAAKjB,UAAU,kBACZC,OAAOiB,KAAKT,EAAWD,kBAAkBW,OAAS,EAEjD,kBAAC,EAAD,CAAehB,SAAUM,EAAWD,mBAEpC,mDCjBKY,EAdU,WAAO,IAAD,EACNb,mBAAS,IADH,oBAK3B,OACI,kBAAC,IAAMc,SAAP,KACE,kBAAC,IAAD,CAAOC,OAAQ,SAAA7B,GAAK,OAAI,kBAAC,EAAgBA,QCC/B8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASN,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFO,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f44ad4df.chunk.js","sourcesContent":["import React from \"react\";\nimport { Table, Container } from \"reactstrap\";\nimport \"./ExchangeTable.css\";\n\nconst ExchangeTable = (props) => {\n  return (\n    <>\n    <Container>\n        <Table dark-light size=\"sm\" hover bordered className='report'>\n            <thead>\n            <tr className='report-head'>\n                <th>Country</th>\n                <th>Rate</th>\n            </tr>\n            </thead>\n            <tbody>\n        {Object.entries(props.currency).map(currency => {\n             return ( <tr className='report' key={currency[0]}>\n                <td>{currency[0]}</td>\n                <td>{currency[1]}</td>\n            </tr>\n             )\n            })\n        }\n         </tbody>\n         </Table>\n    </Container>\n    </>\n  );\n};\n\nexport default ExchangeTable;\n","import React, { useEffect, useState } from \"react\";\nimport ExchangeTable from \"./ExchangeTable\";\n\n//Author: Scott Silver\n//Purpose: Display Currency associated with fetch.\n//Methods: GET Currency\n\nconst ExchangeGET = (props) => {\n  const [myCurrency, setMyCurrency] = useState({ conversion_rates: {} });\n\n  const getMyCurrency = () => {\n    fetch(\n      `https://v6.exchangerate-api.com/v6/9976b2b1ce62fc782f97dd26/latest/EUR`,\n      {\n        method: \"GET\",\n      }\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setMyCurrency(data);\n      });\n  };\n\n  useEffect(\n    () => {\n       getMyCurrency();\n    }, []);\n\n  return (\n    <>\n      <div className=\"myCurrency-Div\">\n        {Object.keys(myCurrency.conversion_rates).length > 0 ? (\n\n          <ExchangeTable currency={myCurrency.conversion_rates} />\n        ) : (\n          <p>You have no money</p>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ExchangeGET;\n","import { Route } from \"react-router-dom\";\nimport React, { useState } from \"react\";\nimport ExchangeGET from \"./components/ExchangeGET\"\n\nconst ApplicationViews = () => {\n    const [ currency ] = useState({})\n\n\n\n    return (\n        <React.Fragment>\n          <Route render={props => <ExchangeGET {...props} />} />\n\n\n          </React.Fragment>\n  );\n};\n\nexport default ApplicationViews","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport './index.css';\nimport ApplicationViews from './ApplicationViews';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <ApplicationViews />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}